#version 430

precision OVERWRITE_PRECISION float;

#define WORKGROUP_SIZE WORKGROUP_SIZE_VALUE

layout(local_size_x = 1, local_size_y = RESET_VALUE, local_size_z = 4) in;

subroutine void instanceType(in int indexNow, in float alpha);
subroutine uniform instanceType instanceTypeState;

// 2D: vec4*2(final), vec4*2(state)
// 3D: vec4*3(final), vec4*4(state)
layout(binding = 0, INSTANCE_FORMAT) uniform imageBuffer dataPackage_Final0;
layout(binding = 1, INSTANCE_FORMAT) uniform imageBuffer dataPackage_Final1;
layout(binding = 2, INSTANCE_FORMAT) uniform imageBuffer dataPackage_Final2;
layout(binding = 3, INSTANCE_FORMAT) uniform imageBuffer dataPackage_State0;
layout(binding = 4, INSTANCE_FORMAT) uniform imageBuffer dataPackage_State1;
layout(binding = 5, INSTANCE_FORMAT) uniform readonly imageBuffer dataPackage_State2;
layout(binding = 6, INSTANCE_FORMAT) uniform readonly imageBuffer dataPackage_State3;
// vec4(timer)
layout(binding = 7, rgba32f) uniform imageBuffer timerPackage;
// frameAmount, lastSize
uniform vec2 instanceState;

subroutine(instanceType) void instance2D(in int indexNow, in float alpha) {
	vec4 final0 = imageLoad(dataPackage_Final0, indexNow);
	vec4 final1 = imageLoad(dataPackage_Final1, indexNow);
	vec4 state0 = imageLoad(dataPackage_State0, indexNow);
	vec4 state1 = imageLoad(dataPackage_State1, indexNow);

	vec2 loc = final0.wz;
	float facing = state0.z;
	vec2 scale = state0.xy;

	// dLoc, dScale
	vec4 dynamic = state1 * instanceState.x;
	float turnRate = state0.w * instanceState.x;

	float pryFacing = radians(facing * 0.5);
	float pryCos = cos(pryFacing);
	float prySin = sin(pryFacing);

	float dqz = prySin + prySin;
	float q22 = dqz * prySin;
	float q23 = dqz * pryCos;

	loc += dynamic.xy;
	facing = mod(facing + turnRate + 360.0, 360.0);
	scale += dynamic.zw;
	imageStore(dataPackage_Final0, indexNow, vec4(
	scale.x - q22 * scale.x,
	-q23 * scale.y,
	loc.y,
	loc.x
	));
	imageStore(dataPackage_Final1, indexNow, vec4(
	q23 * scale.x,
	scale.y - q22 * scale.y,
	0.0,
	alpha
	));

	imageStore(dataPackage_State0, indexNow, vec4(scale, facing, state0.w));
}

subroutine(instanceType) void instance3D(in int indexNow, in float alpha) {
	vec4 final0 = imageLoad(dataPackage_Final0, indexNow);
	vec4 final1 = imageLoad(dataPackage_Final1, indexNow);
	vec4 final2 = imageLoad(dataPackage_Final2, indexNow);
	vec4 state0 = imageLoad(dataPackage_State0, indexNow);
	vec4 state1 = imageLoad(dataPackage_State1, indexNow);
	vec4 state2 = imageLoad(dataPackage_State2, indexNow);
	vec4 state3 = imageLoad(dataPackage_State3, indexNow);

	vec3 loc = final0.wyz;
	vec3 rotate = vec3(state0.x, state0.y, state0.z);
	vec3 scale = vec3(state1.x, state1.y, state1.z);

	// dLoc, dRotate, dScale
	mat3 dynamic = mat3(
	state1.w, state2.x, state2.y,
	state2.z, state2.w, state3.x,
	state3.y, state3.z, state3.w
	);
	dynamic *= instanceState.x;

	vec3 pryRotate = radians(rotate * 0.5);
	vec3 pryCos = cos(pryRotate);
	vec3 prySin = sin(pryRotate);

	float wq = pryCos.x * pryCos.y * pryCos.z - prySin.x * prySin.y * prySin.z;
	float xq = prySin.x * pryCos.y * pryCos.z - pryCos.x * prySin.y * prySin.z;
	float yq = pryCos.x * prySin.y * pryCos.z + prySin.x * pryCos.y * prySin.z;
	float zq = pryCos.x * pryCos.y * prySin.z + prySin.x * prySin.y * pryCos.z;

	float dqx = xq + xq;
	float dqy = yq + yq;
	float dqz = zq + zq;
	float q00 = dqx * xq;
	float q11 = dqy * yq;
	float q22 = dqz * zq;
	float q01 = dqx * yq;
	float q02 = dqx * zq;
	float q03 = dqx * wq;
	float q12 = dqy * zq;
	float q13 = dqy * wq;
	float q23 = dqz * wq;

	loc += dynamic[0];
	rotate = mod(rotate + dynamic[1] + 360.0, 360.0);
	scale += dynamic[2];
	imageStore(dataPackage_Final0, indexNow, vec4(
	scale.x - (q11 + q22) * scale.x,
	loc.z,
	loc.y,
	loc.x
	));
	imageStore(dataPackage_Final1, indexNow, vec4(
	(q01 + q23) * scale.x,
	scale.y - (q22 + q00) * scale.y,
	(q12 - q03) * scale.z,
	(q01 - q23) * scale.y
	));
	imageStore(dataPackage_Final2, indexNow, vec4(
	(q02 - q13) * scale.x,
	(q12 + q03) * scale.y,
	scale.z - (q11 + q00) * scale.z,
	(q02 + q13) * scale.z
	));

	imageStore(dataPackage_State0, indexNow, vec4(rotate, alpha));
	imageStore(dataPackage_State1, indexNow, vec4(scale, state1.w));
}

void main()
{
	int localIndex = int(gl_LocalInvocationID.y * gl_WorkGroupSize.z + gl_LocalInvocationID.z);
	int globalIndex = int(gl_WorkGroupID.y * gl_NumWorkGroups.z + gl_WorkGroupID.z) * WORKGROUP_SIZE;
	int indexNow = localIndex + globalIndex;
	if (indexNow >= int(instanceState.y)) return;
	vec4 timer = imageLoad(timerPackage, indexNow);
	if (timer.x < -1000.0) return;

	float alpha = 10.0;
	bool finishSet = timer.x < -500.0;
	vec2 timerTmp = finishSet ? vec2(-512.0) : vec2(timer.w, -10.0);
	if (timer.x > 2.0) {
		alpha = abs(timer.x - 3.0);
		timerTmp = vec2(timer.y, 2.0);
	} else if (timer.x > 1.0) {
		timerTmp = vec2(timer.z, 1.0);
		alpha = 21.0;
	} else if (timer.x > 0.0) {
		alpha = timer.x + 10.0;
	}
	timer.x = timerTmp.x > -500.0 ? (timer.x - timerTmp.x * instanceState.x) : timerTmp.y;
	if (timer.x <= 0.0 && timer.x > -500.0) {
		timer.x = -512.0;
	} else if (finishSet) timer.x = -1024.0;
	imageStore(timerPackage, indexNow, timer);

	instanceTypeState(indexNow, alpha);
}
