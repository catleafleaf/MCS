#version 430

precision OVERWRITE_PRECISION float;
precision highp int;

layout(local_size_x = RESET_VALUE, local_size_y = 8, local_size_z = 1) in;

subroutine vec4 formatPickerLoad(in ivec2 coord);
subroutine uniform formatPickerLoad formatPickerLoadState;
subroutine void formatPickerStore(in ivec2 coord, in vec4 result);
subroutine uniform formatPickerStore formatPickerStoreState;

layout(binding = 0, rgba8) uniform readonly image2D texIn;
layout(binding = 1, rgba8) uniform writeonly image2D texOut;
layout(binding = 2, rgba16) uniform readonly image2D texIn16;
layout(binding = 3, rgba16) uniform writeonly image2D texOut16;

uniform ivec3 sizeStep;
uniform int vertical;
uniform float perStep; // 1.5219615 / max(step, 1)

float getGaussian(float i) {
    return 0.3789403 * exp(-1.1904761 * i * i);
}

subroutine(formatPickerLoad) vec4 bit8Load(in ivec2 coord) {
    return imageLoad(texIn, coord);
}

subroutine(formatPickerLoad) vec4 bit16Load(in ivec2 coord) {
    return imageLoad(texIn16, coord);
}

subroutine(formatPickerStore) void bit8Store(in ivec2 coord, in vec4 result) {
    imageStore(texOut, coord, result);
}

subroutine(formatPickerStore) void bit16Store(in ivec2 coord, in vec4 result) {
    imageStore(texOut16, coord, result);
}

void main()
{
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(coord, sizeStep.xy))) return;
    ivec2 maxIndex = sizeStep.xy - 1;
    vec4 result = vec4(0.0);
    ivec2 offset;
    float gaussian, fix = 0.0;
    bool isVertical = bool(vertical);
    for (int i = -sizeStep.z; i <= sizeStep.z; ++i) {
        gaussian = getGaussian(float(i) * perStep);
        fix += gaussian;
        offset = isVertical ? ivec2(0, i) : ivec2(i, 0);
        result += formatPickerLoadState(clamp(offset + coord, ivec2(0), maxIndex)) * gaussian;
    }
    result /= fix;
    formatPickerStoreState(coord, result);
}