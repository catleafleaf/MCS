#version 430

precision OVERWRITE_PRECISION float;
precision highp int;

layout(local_size_x = RESET_VALUE, local_size_y = 8, local_size_z = 1) in;

subroutine vec4 formatPickerLoadSrc(in ivec2 coord);
subroutine uniform formatPickerLoadSrc formatPickerLoadSrcState;
subroutine vec3 formatPickerLoad(in ivec2 coord);
subroutine uniform formatPickerLoad formatPickerLoadState;
subroutine void formatPickerStore(in ivec2 coord, in vec4 result);
subroutine uniform formatPickerStore formatPickerStoreState;

layout(binding = 0, rgba8) uniform readonly image2D texSrc;
layout(binding = 1, rgba16) uniform readonly image2D texSrc16;
layout(binding = 2, rgba8) uniform readonly image2D texIn;
layout(binding = 3, rgba8) uniform writeonly image2D texOut;
layout(binding = 4, rgba16) uniform readonly image2D texIn16;
layout(binding = 5, rgba16) uniform writeonly image2D texOut16;

uniform ivec3 sizeStep;
uniform int vertical;
uniform vec2 gSigmaSRInv;

vec3 getWeight(in vec3 diff, in float i) {
    return exp(gSigmaSRInv.x * i * i + gSigmaSRInv.y * diff * diff);
}

subroutine(formatPickerLoadSrc) vec4 bit8LoadSrc(in ivec2 coord) {
    return imageLoad(texSrc, coord);
}

subroutine(formatPickerLoadSrc) vec4 bit16LoadSrc(in ivec2 coord) {
    return imageLoad(texSrc16, coord);
}

subroutine(formatPickerLoad) vec3 bit8Load(in ivec2 coord) {
    return imageLoad(texIn, coord).xyz;
}

subroutine(formatPickerLoad) vec3 bit16Load(in ivec2 coord) {
    return imageLoad(texIn16, coord).xyz;
}

subroutine(formatPickerStore) void bit8Store(in ivec2 coord, in vec4 result) {
    imageStore(texOut, coord, result);
}

subroutine(formatPickerStore) void bit16Store(in ivec2 coord, in vec4 result) {
    imageStore(texOut16, coord, result);
}

void main()
{
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(coord, sizeStep.xy))) return;
    vec4 center = formatPickerLoadSrcState(coord);
    bool isVertical = bool(vertical);
    ivec2 checkSize = ivec2(0, isVertical ? sizeStep.y : sizeStep.x);
    ivec2 coordCurr;
    vec3 curr, diff, sum = vec3(0.0), weightCurr, weight = vec3(0.0);
    for (int i = -sizeStep.z; i <= sizeStep.z; ++i) {
        coordCurr = coord + (isVertical ? ivec2(0, i) : ivec2(i, 0));
        checkSize.x = isVertical ? coordCurr.y : coordCurr.x;
        if (checkSize.x < 0 || checkSize.x >= checkSize.y) continue;
        curr = formatPickerLoadState(coordCurr);
        diff = center.xyz - curr;
        weightCurr = getWeight(diff, float(i));
        sum += curr * weightCurr;
        weight += weightCurr;
    }
    formatPickerStoreState(coord, vec4(sum / weight, center.w));
}