#version 430

precision OVERWRITE_PRECISION float;
precision highp int;

#define PI2 6.2831853

layout(local_size_x = RESET_VALUE, local_size_y = 8, local_size_z = 1) in;

subroutine float formatPickerLoad(in ivec2 coord);
subroutine uniform formatPickerLoad formatPickerLoadState;
subroutine void formatPickerStore(in ivec2 coord, in vec2 result, in bool isGenRed);
subroutine uniform formatPickerStore formatPickerStoreState;

layout(binding = 0, r8) uniform readonly image2D texIn;
layout(binding = 1, r8) uniform writeonly image2D texOut;
layout(binding = 2, r16f) uniform readonly image2D texIn16;
layout(binding = 3, r16f) uniform writeonly image2D texOut16;
layout(binding = 4, r32f) uniform readonly image2D texIn32;
layout(binding = 5, r32f) uniform writeonly image2D texOut32;

uniform ivec2 size;
uniform int state; // 0b1 = inverse, 0b10 = vertical, 0b100 = genFromRed, 0b1000 = genRed;
uniform vec2 sizeDiv;

vec2 getEuler(in float theta) {
    return vec2(cos(theta), sin(theta));
}

vec2 cmul(in vec2 left, in vec2 right)
{
    return vec2(left.x * right.x - left.y * right.y, left.x * right.y + left.y * right.x);
}

subroutine(formatPickerLoad) float bit8Load(in ivec2 coord) {
    return imageLoad(texIn, coord).x;
}

subroutine(formatPickerLoad) float bit16Load(in ivec2 coord) {
    return imageLoad(texIn16, coord).x;
}

subroutine(formatPickerLoad) float bit32Load(in ivec2 coord) {
    return imageLoad(texIn32, coord).x;
}

subroutine(formatPickerStore) void bit8Store(in ivec2 coord, in vec2 result, in bool isGenRed) {
    vec4 resultStore = isGenRed ? vec4(length(result), vec3(0.0)) : vec4(result.x, vec3(0.0));
    imageStore(texOut, coord, resultStore);
    if (!isGenRed) imageStore(texOut, ivec2(coord.x + size.x, coord.y), vec4(result.y, vec3(0.0)));
}

subroutine(formatPickerStore) void bit16Store(in ivec2 coord, in vec2 result, in bool isGenRed) {
    vec4 resultStore = isGenRed ? vec4(length(result), vec3(0.0)) : vec4(result.x, vec3(0.0));
    imageStore(texOut16, coord, resultStore);
    if (!isGenRed) imageStore(texOut16, ivec2(coord.x + size.x, coord.y), vec4(result.y, vec3(0.0)));
}

subroutine(formatPickerStore) void bit32Store(in ivec2 coord, in vec2 result, in bool isGenRed) {
    vec4 resultStore = isGenRed ? vec4(length(result), vec3(0.0)) : vec4(result.x, vec3(0.0));
    imageStore(texOut32, coord, resultStore);
    if (!isGenRed) imageStore(texOut32, ivec2(coord.x + size.x, coord.y), vec4(result.y, vec3(0.0)));
}

vec2 transformHFromRed(in ivec2 coord, in float centerCoord) {
    float theta, coordF = PI2 * centerCoord * sizeDiv.x;
    vec2 euler;
    vec2 result = vec2(0.0);
    for (int n = 0; n < size.x; ++n) {
        theta = float(n) * coordF;
        euler = getEuler(theta);
        result += cmul(vec2(formatPickerLoadState(ivec2(n, coord.y)), 0.0), euler);
    }
    return result;
}

vec2 transformH(in ivec2 coord, in float pi, in float centerCoord) {
    float theta, coordF = pi * centerCoord * sizeDiv.x;
    int coordSub = size.x;
    vec2 euler;
    vec2 comp = vec2(0.0);
    vec2 result = vec2(0.0);
    for (int n = 0; n < size.x; ++n) {
        theta = float(n) * coordF;
        euler = getEuler(theta);
        comp.x = formatPickerLoadState(ivec2(n, coord.y));
        comp.y = formatPickerLoadState(ivec2(coordSub, coord.y));
        result += cmul(comp, euler);
        ++coordSub;
    }
    return result;
}

vec2 transformV(in ivec2 coord, in float pi, in float centerCoord) {
    float theta, coordF = pi * centerCoord * sizeDiv.y;
    int coordSub = coord.x + size.x;
    vec2 euler;
    vec2 comp = vec2(0.0);
    vec2 result = vec2(0.0);
    for (int n = 0; n < size.y; ++n) {
        theta = float(n) * coordF;
        euler = getEuler(theta);
        comp.x = formatPickerLoadState(ivec2(coord.x, n));
        comp.y = formatPickerLoadState(ivec2(coordSub, n));
        result += cmul(comp, euler);
    }
    return result;
}

void main()
{
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(coord, size))) return;
    bool isInverse = (state & 1) == 1;
    bool isVertical = (state & 2) == 2;
    bool isGenFromRed = (state & 4) == 4;
    bool isGenRed = (state & 8) == 8;
    vec2 centerCoord = isVertical ? vec2(coord.y, size.y) : vec2(coord.x, size.x);
    if (!isInverse) centerCoord.x -= centerCoord.y * 0.5;

    float pi = isInverse ? -PI2 : PI2;
    vec2 result = vec2(0.0);
    if (isGenFromRed) {
        result = transformHFromRed(coord, centerCoord.x);
    } else {
        result = isVertical ? transformV(coord, pi, centerCoord.x) : transformH(coord, pi, centerCoord.x);
    }
    if (isInverse) {
        vec2 div = vec2(isVertical ? sizeDiv.y : sizeDiv.x);
        result *= div;
    }
    formatPickerStoreState(coord, result, isGenRed);
}